#include <iostream>
#include <random>
#include <limits>
#include <cassert>
#include <chrono>
#include "ips4o.hpp"

int main(int argc, char** argv) {

    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_int_distribution<uint64_t> dis(0, std::numeric_limits<uint64_t>::max());
    std::vector<uint64_t> x; x.reserve(1e8);
    for (int n=0; n<1e8; ++n) {
        //Use dis to transform the random unsigned int generated by gen into an int in [1, 6]
        x.push_back(dis(gen));
    }

    std::cerr << "starting sort" << std::endl;
    auto start = std::chrono::system_clock::now();
    // sort in parallel (uses OpenMP if available, std::thread otherwise)
    ips4o::parallel::sort(x.begin(), x.end());
    // sort sequentially
    //ips4o::sort(x.begin(), x.end());
    auto end = std::chrono::system_clock::now();
 
    std::chrono::duration<double> elapsed_seconds = end-start;
    std::time_t end_time = std::chrono::system_clock::to_time_t(end);
    std::cerr << "completed in " << elapsed_seconds.count() << "s" << std::endl;

    // check the sort
    std::cerr << "checking sort" << std::endl;
    for (int n=1; n<1e6; ++n) {
        assert(x[n-1] <= x[n]);
    }
    std::cerr << "ok" << std::endl;

    return 0;

}
