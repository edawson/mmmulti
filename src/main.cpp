#include <iostream>
#include <random>
#include <limits>
#include <cassert>
#include <chrono>
#include "ips4o.hpp"
#include "args.hxx"
#include "buffer.hpp"
#include "threads.hpp"
#include <endian.h>

using namespace mmmultimap;

int main(int argc, char** argv) {

    args::ArgumentParser parser("memmapped multimap interface");
    args::HelpFlag help(parser, "help", "display this help summary", {'h', "help"});
    args::ValueFlag<std::string> in_file(parser, "FILE", "use this input file for a uint64_t sort", {'i', "in"});
    args::Flag test_sort(parser, "", "test ips4o in memory", {'t', "test"});
    args::ValueFlag<uint64_t> threads(parser, "N", "number of threads to use", {'t', "threads"});

    try {
        parser.ParseCLI(argc, argv);
    } catch (args::Help) {
        std::cout << parser;
        return 0;
    } catch (args::ParseError e) {
        std::cerr << e.what() << std::endl;
        std::cerr << parser;
        return 1;
    }
    if (argc==1) {
        std::cout << parser;
        return 1;
    }

    if (args::get(threads)) {
        omp_set_num_threads(args::get(threads));
    }
    
    if (!args::get(in_file).empty()) {
        mmap_buffer_t buffer;
        open_mmap_buffer(args::get(in_file).c_str(), &buffer);
        std::vector<uint64_t>::iterator begin_ptr((uint64_t*)buffer.data);
        uint64_t data_len = buffer.size/sizeof(uint64_t);
        std::vector<uint64_t>::iterator end_ptr((uint64_t*)buffer.data+data_len);
        std::cerr << "data length " << data_len << std::endl;

        std::cerr << "starting sort" << std::endl;
        auto start = std::chrono::system_clock::now();
        // sort in parallel (uses OpenMP if available, std::thread otherwise)
        ips4o::parallel::sort(begin_ptr, end_ptr);
        // sort sequentially
        //ips4o::sort(x.begin(), x.end());
        auto end = std::chrono::system_clock::now();

        std::chrono::duration<double> elapsed_seconds = end-start;
        std::time_t end_time = std::chrono::system_clock::to_time_t(end);
        std::cerr << "completed in " << elapsed_seconds.count() << "s" << std::endl;

        // check the sort
        /*
        std::cerr << "checking sort" << std::endl;
        uint64_t* x = (uint64_t*)buffer.data;
        for (int n=1; n<data_len; ++n) {
            assert(x[n-1] <= x[n]);
        }
        std::cerr << "ok" << std::endl;
        */

        close_mmap_buffer(&buffer);
    }

    if (args::get(test_sort)) {
        std::random_device rd;  //Will be used to obtain a seed for the random number engine
        std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
        std::uniform_int_distribution<uint64_t> dis(0, std::numeric_limits<uint64_t>::max());
        //std::vector<uint64_t> x; x.reserve(1e8);
        uint64_t x_len = 1e8;
        uint64_t* x = (uint64_t*) malloc(x_len * sizeof(uint64_t));
        for (int n=0; n<x_len; ++n) {
            //Use dis to transform the random unsigned int generated by gen into an int in [1, 6]
            //x.push_back(dis(gen));
            x[n] = dis(gen);
        }

        // cast the input file to the
        std::vector<uint64_t>::iterator begin_ptr(x);
        std::vector<uint64_t>::iterator end_ptr(x+x_len);

        std::cerr << "starting sort" << std::endl;
        auto start = std::chrono::system_clock::now();
        // sort in parallel (uses OpenMP if available, std::thread otherwise)
        ips4o::parallel::sort(begin_ptr, end_ptr);
        // sort sequentially
        //ips4o::sort(x.begin(), x.end());
        auto end = std::chrono::system_clock::now();

        std::chrono::duration<double> elapsed_seconds = end-start;
        std::time_t end_time = std::chrono::system_clock::to_time_t(end);
        std::cerr << "completed in " << elapsed_seconds.count() << "s" << std::endl;

        // check the sort
        std::cerr << "checking sort" << std::endl;
        for (int n=1; n<x_len; ++n) {
            assert(x[n-1] <= x[n]);
        }
        std::cerr << "ok" << std::endl;
        free(x);
    }

    return 0;

}
